{
    "group": "默认书源",
    "bookSource": [
        {
            "source": "起点中文网",
            "js": "function search(query) {\r\n    var baseUrl = \"https://www.qidian.com/\";\r\n    var url = \"soushu/\" + URLEncoder.encode(query, \"utf-8\") + \".html\";\r\n    var doc = get({baseUrl: baseUrl, url: url})\r\n\r\n    var bookListEl = doc.select(\".res-book-item\");\r\n    var results = new ArrayList();\r\n    for (var i = 0; i < bookListEl.size(); i++) {\r\n        var bookEl = bookListEl.get(i);\r\n        var result = new SearchResult();\r\n        result.bookTitle = bookEl.select(\".book-info-title\").get(0).select(\"a\").get(0).text();\r\n        result.bookUrl = \"https://m.qidian.com/book/\" + (bookEl.select(\"a[data-bid]\").attr(\"data-bid\"));\r\n        result.bookAuthor = bookEl.select(\".author\").select(\".author > :nth-child(2)\").get(0).text();\r\n        results.add(result);\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction getDetails(url) {\r\n    var doc = get({url: url});\r\n    var book = new Book();\r\n    book.url = url;\r\n    Log.e(\">>>>>book.title\")\r\n    book.title = doc.select(\"meta[property=\\\"og:novel:book_name\\\"]\").attr(\"content\");\r\n    Log.e(book.bookTitle)\r\n    book.author = doc.select(\"meta[property=\\\"og:novel:author\\\"]\").attr(\"content\");\r\n    Log.e(book.author)\r\n    book.intro = doc.select(\"meta[property=\\\"og:description\\\"]\").attr(\"content\");\r\n    Log.e(book.intro)\r\n    book.cover = doc.select(\"meta[property=\\\"og:image\\\"]\").attr(\"content\");\r\n    Log.e(book.cover)\r\n    var chapterListUrl = doc.select(\"#details-menu\").get(0).absUrl(\"href\");\r\n    var chapterListEl = get({url:chapterListUrl}).select(\".y-list__content a\");\r\n    Log.e(chapterListEl.size())\r\n    var chapterList = new ArrayList();\r\n    for (i = 0; i < chapterListEl.size(); i++) {\r\n        var chapterEl = chapterListEl.get(i);\r\n        var chapter = new Chapter();\r\n        chapter.title = chapterEl.select(\"h2\").get(0).text();\r\n        Log.e(chapter.title)\r\n        chapter.url = chapterEl.absUrl(\"href\");\r\n        Log.e(chapter.url)\r\n        chapterList.add(chapter);\r\n    }\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterContent(url) {\r\n    var doc = get({url: url});\r\n    return doc.select(\"main\").html()\r\n}",
            "version": 17,
            "original": true,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "changshengrui_com",
            "js": "function search(query){\r\n    var baseUrl = \"http://www.changshengrui.com/\";\r\n    var html = http.get(baseUrl+\"search/?searchkey=\" + URLEncoder.encode(query, \"utf-8\")).body;\r\n    var parse = Jsoup.parse(html,baseUrl);\r\n    var bookList = parse.select(\".item\");\r\n    var results = new ArrayList();\r\n    for (var i=0;i<bookList.size();i++){\r\n        var bookElement = bookList.get(i);\r\n        var result = new SearchResult();\r\n        result.bookTitle = bookElement.selectFirst(\"dl > dt > a\").text();\r\n        result.bookUrl = bookElement.selectFirst(\"dl > dt > a\").absUrl(\"href\");\r\n        result.bookAuthor = bookElement.selectFirst(\".btm\").ownText();\r\n        results.add(result);\r\n    }\r\n    return results;\r\n}\r\n\r\n/**\r\n * 书籍详情[JavaScript.source]\r\n */\r\nfunction getDetails(url){\r\n    var parse = Jsoup.parse(http.get(url).body,url);\r\n    var book = new Book();\r\n    //书籍信息\r\n    book.url = url;\r\n    book.title = parse.selectFirst(\"#info > h1\").text();\r\n    book.author = parse.selectFirst(\"#info > p:nth-child(2) > a\").text();\r\n    book.intro = parse.selectFirst(\"#intro\").html();\r\n    book.cover = parse.selectFirst(\"#fmimg > img\").absUrl(\"src\");\r\n    var chapterUrl = parse.selectFirst(\"#maininfo .chapterlist\").absUrl(\"href\");\r\n    var chapterList = new ArrayList();\r\n    getChapterList(http,chapterUrl,chapterList)\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterList(http,url,chapterList){\r\n    var parse = Jsoup.parse(http.get(url).body,url);\r\n    var chapterListEl = parse.select(\"#list > dl > a\");\r\n    for (var i=0;i<chapterListEl.size();i++){\r\n        var chapterEl = chapterListEl.get(i);\r\n        var chapter = new Chapter();\r\n        chapter.title = chapterEl.text();\r\n        chapter.url = chapterEl.absUrl(\"href\");\r\n        chapterList.add(chapter);\r\n    }\r\n    var a = parse.selectFirst(\".right a\");\r\n    if(a.text().equals(\"下一页\")){\r\n        getChapterList(http,a.absUrl(\"href\"),chapterList)\r\n    }\r\n}\r\n\r\nfunction getChapterContent(url){\r\n    var str = http.get(url).body\r\n    var parse = Jsoup.parse(str,url);\r\n    var content = parse.getElementById(\"booktxt\").html();\r\n    var a = parse.select(\".next_url\").get(0)\r\n    if(a.text().equals(\"下一页\")){\r\n        var next_url = str.match(/const\\snext_page\\s=\\s'(.+)';/)[1]\r\n        next_url = next_url.replace(\"wap.ukaxs.com\",\"www.changshengrui.com\")\r\n        return content+\"\\n\"+getChapterContent(next_url)\r\n    }\r\n    return content;\r\n}",
            "version": 6,
            "original": false,
            "enable": true,
            "requestDelay": 1000,
            "website": ""
        },
        {
            "source": "蚂蚁文学",
            "js": "function search(query){\r\n    var baseUrl = \"https://www.mayiwxw.com/\";\r\n    var map = new HashMap();\r\n    map.put(\"searchtype\", \"articlename\")\r\n    map.put(\"searchkey\",URLEncoder.encode(query,\"utf-8\"))\r\n    var html = http.post(baseUrl+\"modules/article/search.php\",map).body;\r\n    var parse = Jsoup.parse(html, baseUrl);\r\n    var bookListEl = parse.select(\"#nr\");\r\n    Log.e(\">>>>>bookListEl Size \"+bookListEl.size()+\">>>>>>>>>>>>>>>>>>>>\")\r\n    var results = new ArrayList();\r\n    for (var i=0;i<bookListEl.size();i++){\r\n        var bookEl = bookListEl.get(i);\r\n        Log.e(bookEl.tagName()+\">>>>>\"+i+\">>>>>>>>>>>>>>>>>>>>\")\r\n        Log.e(\"bookEl>>>>\")\r\n        Log.e(bookEl)\r\n        var result = new SearchResult();\r\n        Log.e(\"bookTitle>>>>\")\r\n        result.bookTitle = bookEl.selectFirst(\"> td:nth-child(1) > a\").text();\r\n        Log.e(result.bookTitle)\r\n        Log.e(\"bookUrl>>>>\")\r\n        result.bookUrl = bookEl.selectFirst(\"> td:nth-child(1) > a\").absUrl(\"href\");\r\n        Log.e(result.bookUrl)\r\n        Log.e(\"bookAuthor>>>>\")\r\n        result.bookAuthor = bookEl.selectFirst(\"> td:nth-child(3)\").text();\r\n        Log.e(result.bookAuthor)\r\n        results.add(result);\r\n        Log.e(bookEl.tagName()+\"<<<<<\"+i+\"<<<<<<<<<<<<<<<<<<<<\")\r\n    }\r\n    return results;\r\n}\r\n\r\n/**\r\n * 书籍详情[JavaScript.source]\r\n */\r\nfunction getDetails(url){\r\n    var parse = Jsoup.parse(http.get(url).body,url);\r\n    var book = new Book();\r\n    book.url = url;\r\n    Log.e(\"title>>>>\")\r\n    book.title =  parse.selectFirst(\"[property=og:novel:book_name]\").attr(\"content\");\r\n    Log.e(book.title)\r\n    Log.e(\"author>>>>\")\r\n    book.author = parse.selectFirst(\"[property=og:novel:author]\").attr(\"content\");\r\n    Log.e(book.author)\r\n    Log.e(\"intro>>>>\")\r\n    book.intro = parse.selectFirst(\"#intro\").outerHtml();\r\n    Log.e(book.intro)\r\n    Log.e(\"cover>>>>\")\r\n    book.cover = parse.selectFirst(\"#fmimg > img\").absUrl(\"src\");\r\n    Log.e(book.cover)\r\n    //加载章节列表\r\n    var children = parse.selectFirst(\"#list dl\").children();\r\n    Log.e(\"章节列表数量：\"+children.size())\r\n    var chapterList = new ArrayList();\r\n    for(i=children.size()-1; i>=0; i--){\r\n        var chapterEl = children.get(i);\r\n        if(chapterEl.tagName() == \"dt\"){\r\n            break;\r\n        }\r\n        var chapter = new Chapter();\r\n        Log.e(\"chapter.title>>>>\")\r\n        chapter.title = chapterEl.child(0).text();\r\n        Log.e(chapter.title)\r\n        Log.e(\"chapter.url>>>>\")\r\n        chapter.url = chapterEl.child(0).absUrl(\"href\");\r\n        Log.e(chapter.title)\r\n        chapterList.add(0,chapter);\r\n    }\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterContent(url){\r\n    var html = http.get(url).body;\r\n    return Jsoup.parse(html).selectFirst(\"#content\").outerHtml();\r\n}",
            "version": 3,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "搜读",
            "js": "function search(query){\n    var baseUrl = \"http://www.soduzw.com/search.html\";\n    var map = new HashMap();\n    map.put(\"searchtype\", \"novelname\")\n    map.put(\"searchkey\",URLEncoder.encode(query,\"utf-8\"))\n    var html = http.post(baseUrl,map).body;\n    var parse = Jsoup.parse(html, baseUrl);\n    var bookListEl = parse.select(\".Search\");\n    Log.e(\">>>>>bookListEl Size \"+bookListEl.size()+\">>>>>>>>>>>>>>>>>>>>\")\n    var results = new ArrayList();\n    for (var i=0;i<bookListEl.size();i++){\n        var bookEl = bookListEl.get(i);\n        Log.e(bookEl.tagName()+\">>>>>\"+i+\">>>>>>>>>>>>>>>>>>>>\")\n        Log.e(\"bookEl>>>>\")\n        Log.e(bookEl)\n        var result = new SearchResult();\n        Log.e(\"bookTitle>>>>\")\n        result.bookTitle = bookEl.selectFirst(\"a\").text();\n        Log.e(result.bookTitle)\n        Log.e(\"bookUrl>>>>\")\n        result.bookUrl = bookEl.selectFirst(\"a\").absUrl(\"href\").replace(\"mulu_\",\"\").replace(\".html\",\"/\");\n        Log.e(result.bookUrl)\n        Log.e(\"bookAuthor>>>>\")\n        result.bookAuthor = bookEl.select(\"span\").get(1).text().replace(\"作者：\",\"\");\n        Log.e(result.bookAuthor)\n        results.add(result);\n        Log.e(bookEl.tagName()+\"<<<<<\"+i+\"<<<<<<<<<<<<<<<<<<<<\")\n    }\n    return results;\n}\n\nfunction getDetails(url){\n    var parse = Jsoup.parse(http.get(url).body,url);\n    var book = new Book();\n    //书籍信息\n    book.url = url;\n    book.title = parse.select(\".Mulu_title\").get(0).ownText();\n    book.author = parse.select(\".Look a\").get(0).text();\n    book.intro = parse.select(\".Look > div\").get(1).html();\n//    book.cover = parse.select(\".pic > img\").get(0).absUrl(\"src\");\n    //加载章节列表\n    var children = parse.select(\".Look_list_dir .chapter a\");\n    var chapterList = new ArrayList();\n    for(i=0; i<children.size(); i++){\n        var chapterEl = children.get(i);\n        var chapter = new Chapter();\n        chapter.title = chapterEl.text();\n        chapter.url = chapterEl.absUrl(\"href\");\n        chapterList.add(chapter);\n    }\n    book.chapterList = chapterList;\n    return book;\n}\n\nfunction getChapterContent(url){\n    Log.e(\"加载章节内容 ：\"+url)\n    var map = new HashMap();\n    map.put(\"bid\",url.match(/mulu_([a-zA-Z0-9]+)\\/([a-zA-Z0-9]+).html/)[1])\n    map.put(\"cid\",url.match(/mulu_([a-zA-Z0-9]+)\\/([a-zA-Z0-9]+).html/)[2])\n    map.put(\"siteid\",\"0\")\n    map.put(\"url\",\"\")\n    var resp = http.post( \"http://www.soduzw.com/novelsearch/chapter/transcode.html\", map)\n    var content = eval (\" (\" + resp.body + \")\")[\"info\"]\n    Log.e(\"content>>>>>>\")\n    Log.e(content)\n    return content;\n}\n",
            "version": 4,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "xinbiquge",
            "js": "function search(query) {\r\n    var baseUrl = \"https://www.367x.com/modules/article/search.php\";\r\n    var map = new HashMap();\r\n    map.put(\"searchkey\", URLEncoder.encode(query, \"gbk\"))\r\n    var resp = http.post(baseUrl, map);\r\n    var parse = Jsoup.parse(resp.body, resp.url);\r\n    if (baseUrl == resp.url) {\r\n        var bookListEl = parse.select(\".txt-list li\");\r\n        Log.e(\">>>>>bookListEl Size \" + bookListEl.size() + \">>>>>>>>>>>>>>>>>>>>\");\r\n        var results = new ArrayList();\r\n        for (var i = 1; i < bookListEl.size(); i++) {\r\n            var bookEl = bookListEl.get(i);\r\n            Log.e(bookEl.tagName() + \">>>>>\" + i + \">>>>>>>>>>>>>>>>>>>>\")\r\n            Log.e(\"bookEl>>>>\")\r\n            Log.e(bookEl)\r\n            var result = new SearchResult();\r\n            Log.e(\"bookTitle>>>>\")\r\n            result.bookTitle = bookEl.select(\"a\").get(0).text();\r\n            Log.e(result.bookTitle)\r\n            Log.e(\"bookUrl>>>>\")\r\n            result.bookUrl = bookEl.select(\"a\").get(0).absUrl(\"href\");\r\n            Log.e(result.bookUrl)\r\n            Log.e(\"bookAuthor>>>>\")\r\n            result.bookAuthor = bookEl.select(\".s4\").get(0).text();\r\n            Log.e(result.bookAuthor)\r\n            results.add(result);\r\n            Log.e(bookEl.tagName() + \"<<<<<\" + i + \"<<<<<<<<<<<<<<<<<<<<\")\r\n        }\r\n        return results;\r\n    } else {\r\n        var results = new ArrayList();\r\n        var result = new SearchResult();\r\n        Log.e(\"bookTitle>>>>\")\r\n        result.bookTitle = parse.selectFirst(\"[property=og:title]\").attr(\"content\")\r\n        Log.e(result.bookTitle)\r\n        Log.e(\"bookUrl>>>>\")\r\n        result.bookUrl = parse.selectFirst(\"[property=og:url]\").attr(\"content\")\r\n        Log.e(result.bookUrl)\r\n        Log.e(\"bookAuthor>>>>\")\r\n        result.bookAuthor = parse.selectFirst(\"[property=og:novel:author]\").attr(\"content\");\r\n        Log.e(result.bookAuthor)\r\n        results.add(result);\r\n        return results;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * 书籍详情[JavaScript.source]\r\n */\r\nfunction getDetails(url) {\r\n    var parse = Jsoup.parse(http.get(url).body, url);\r\n    var book = new Book();\r\n    book.source = source;\r\n    book.url = url;\r\n    Log.e(\"title>>>>\")\r\n    book.title = parse.selectFirst(\"[property=og:title]\").attr(\"content\");\r\n    Log.e(book.title)\r\n    Log.e(\"author>>>>\")\r\n    book.author = parse.selectFirst(\"[property=og:novel:author]\").attr(\"content\");\r\n    Log.e(book.author)\r\n    Log.e(\"intro>>>>\")\r\n    book.intro = parse.selectFirst(\"[property=og:description]\").attr(\"content\");\r\n    Log.e(book.intro)\r\n    Log.e(\"cover>>>>\")\r\n    book.cover = parse.selectFirst(\"[property=og:image]\").absUrl(\"content\");\r\n    Log.e(book.cover)\r\n    //加载章节列表\r\n    var children = parse.select(\"#section-list a\");\r\n    Log.e(\"章节列表数量：\" + children.size())\r\n    var chapterList = new ArrayList();\r\n    for (i = 0; i < children.size(); i++) {\r\n        var chapterEl = children.get(i);\r\n        var chapter = new Chapter();\r\n        Log.e(\"chapter.title>>>>\")\r\n        chapter.title = chapterEl.text();\r\n        Log.e(chapter.title)\r\n        Log.e(\"chapter.url>>>>\")\r\n        chapter.url = chapterEl.absUrl(\"href\");\r\n        Log.e(chapter.title)\r\n        chapterList.add(chapter);\r\n    }\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterContent(url) {\r\n    var html = http.get(url).body;\r\n    return Jsoup.parse(html).selectFirst(\"#content\").outerHtml();\r\n}",
            "version": 2,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "读书阁",
            "js": "function search(query) {\r\n    var baseUrl = \"http://www.lianjianxsw.com/search\";\r\n    var resp = http.body(baseUrl, JSON.stringify({\"keyword\": query}));\r\n\r\n    var body = eval(\"(\" + resp.body + \")\");\r\n    var bookListEl = body[\"data\"];\r\n    Log.e(\">>>>>bookListEl Size \" + bookListEl.length + \">>>>>>>>>>>>>>>>>>>>\")\r\n    var results = new ArrayList();\r\n    for (var i = 0; i < bookListEl.length; i++) {\r\n        var bookEl = bookListEl[i];\r\n        Log.e(\">>>>>\" + i + \">>>>>>>>>>>>>>>>>>>>\")\r\n        Log.e(\"bookEl>>>>\")\r\n        Log.e(bookEl)\r\n        var result = new SearchResult();\r\n        Log.e(\"bookTitle>>>>\")\r\n        result.bookTitle = bookEl[\"name\"];\r\n        Log.e(result.bookTitle)\r\n        Log.e(\"bookUrl>>>>\")\r\n        result.bookUrl = \"http://www.lianjianxsw.com/bookInfo?bookid=\" + bookEl[\"_id\"]\r\n        Log.e(result.bookUrl)\r\n        Log.e(\"bookAuthor>>>>\")\r\n        result.bookAuthor = bookEl[\"author\"];\r\n        Log.e(result.bookAuthor)\r\n        results.add(result);\r\n        Log.e(\"<<<<<\" + i + \"<<<<<<<<<<<<<<<<<<<<\")\r\n    }\r\n    return results;\r\n\r\n}\r\n\r\n/**\r\n * 书籍详情[JavaScript.source]\r\n */\r\nfunction getDetails(url) {\r\n    var parse = eval(\"(\" + http.get(url).body + \")\")[\"data\"][\"book\"];\r\n    var book = new Book();\r\n    book.url = url;\r\n    Log.e(\"title>>>>\")\r\n    book.title = parse[\"name\"];\r\n    Log.e(book.title)\r\n    Log.e(\"author>>>>\")\r\n    book.author = parse[\"author\"];\r\n    Log.e(book.author)\r\n    Log.e(\"intro>>>>\")\r\n    book.intro = parse[\"intro\"];\r\n    Log.e(book.intro)\r\n    Log.e(\"cover>>>>\")\r\n    book.cover = \"http://www.lianjianxsw.com/pic/\" + parse[\"_id\"] + \".jpg\";\r\n    Log.e(book.cover)\r\n\r\n    var chapterListUrl = \"http://www.lianjianxsw.com/getCataLogs?bookid=\" + parse[\"_id\"] + \"&page=1&limit=\" + parse[\"total_num\"];\r\n    var parseChapter = eval(\"(\" + http.get(chapterListUrl).body + \")\");\r\n    //加载章节列表\r\n    var children = parseChapter[\"data\"][\"list\"];\r\n    Log.e(\"章节列表数量：\" + children.length + \">>>>>>>>>>>>>>>>>>>>\")\r\n    var chapterList = new ArrayList();\r\n    for (i = 0; i < children.length; i++) {\r\n        var chapterEl = children[i];\r\n        var chapter = new Chapter();\r\n        Log.e(\"chapter.title>>>>\")\r\n        chapter.title = chapterEl[\"name\"];\r\n        Log.e(chapter.title)\r\n        Log.e(\"chapter.url>>>>\")\r\n        // http://www.lianjianxsw.com/getContent?bookid=@get:{bid}&chapterid={{$._id}}\r\n        chapter.url = \"http://www.lianjianxsw.com/getContent?bookid=\" + parse[\"_id\"] + \"&chapterid=\" + chapterEl[\"_id\"];\r\n        Log.e(chapter.title)\r\n        chapterList.add(chapter);\r\n    }\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterContent(url) {\r\n    var parse = eval(\"(\" + http.get(url).body + \")\")[\"data\"][\"chapterInfo\"];\r\n    return AesUtil.decrypt(parse[\"content\"], \"6CE93717FBEA3E4F\", \"AES/CBC/NoPadding\", \"6CE93717FBEA3E4F\").trim().replace(\"###$$$\", \"<br>\");\r\n}",
            "version": 4,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "香书小说",
            "js": "function search(query) {\r\n    var baseUrl = \"https://www.ibiquge.la\";\r\n    var url = \"/modules/article/waps.php?searchkey=\" + URLEncoder.encode(query, \"utf-8\");\r\n    var doc = get({baseUrl: baseUrl, url: url})\r\n\r\n    var bookListEl = doc.select(\"tbody\").get(0).select(\"tr\");\r\n    var results = new ArrayList();\r\n    for (var i = 1; i < bookListEl.size(); i++) {\r\n        var bookEl = bookListEl.get(i);\r\n        var result = new SearchResult();\r\n        result.source = source;\r\n        result.bookTitle = bookEl.select(\"td\").get(0).select(\"a\").get(0).text();\r\n        result.bookUrl = bookEl.select(\"td\").get(0).select(\"a\").get(0).absUrl(\"href\");\r\n        result.bookAuthor = bookEl.select(\"td\").get(2).text();\r\n        results.add(result);\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction getDetails(url) {\r\n    var doc = get({url: url});\r\n    var book = new Book();\r\n    book.url = url;\r\n    book.title = doc.select(\"meta[property=\\\"og:novel:book_name\\\"]\").attr(\"content\");\r\n    book.author = doc.select(\"meta[property=\\\"og:novel:author\\\"]\").attr(\"content\");\r\n    book.intro = doc.select(\"meta[property=\\\"og:description\\\"]\").attr(\"content\");\r\n    book.cover = doc.select(\"meta[property=\\\"og:image\\\"]\").attr(\"content\");\r\n    //加载章节列表\r\n    var children = doc.select(\"#list a\");\r\n    Log.e(\"章节列表数量：\" + children.size())\r\n    var chapterList = new ArrayList();\r\n    for (i = 0; i < children.size(); i++) {\r\n        var chapterEl = children.get(i);\r\n        var chapter = new Chapter();\r\n        Log.e(\"chapter.title>>>>\")\r\n        chapter.title = chapterEl.text();\r\n        Log.e(chapter.title)\r\n        Log.e(\"chapter.url>>>>\")\r\n        chapter.url = chapterEl.absUrl(\"href\");\r\n        Log.e(chapter.title)\r\n        chapterList.add(chapter);\r\n    }\r\n    book.chapterList = chapterList;\r\n    return book;\r\n}\r\n\r\nfunction getChapterContent(url) {\r\n    var doc = get({url: url});\r\n    return doc.select(\"#content\").html()\r\n}",
            "version": 2,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        }
    ],
    "pySource": [
        {
            "source": "手机小说",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # POST请求的URL\n    url = 'https://www.shoujixs.net/modules/article/search.php'\n    # POST请求的数据\n    data = {'searchkey': query.encode('gbk')}\n    # 发送POST请求\n    response = requests.post(url, data=data)\n    response.encoding = 'gbk'\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for c_row in soup.select(\".c_row\"):\n        books.append({\n            \"bookTitle\": c_row.select(\".c_subject\")[0].select(\"a\")[0].text,\n            \"bookUrl\": urljoin(url, c_row.select(\".c_subject\")[0].select(\"a\")[0].get(\"href\")),\n            \"bookAuthor\": c_row.select(\".c_value\")[0].text,\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"gbk\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    info[\"url\"] = soup.select(\"meta[property='og:url']\")[0].get(\"content\")\n    # 书名\n    info[\"title\"] = soup.select(\"meta[property='og:novel:book_name']\")[0].get(\"content\")\n    # 作者\n    info[\"author\"] = soup.select(\"meta[property='og:novel:author']\")[0].get(\"content\")\n    # 简介\n    info[\"intro\"] = soup.select(\"meta[property='og:description']\")[0].get(\"content\")\n    # 封面\n    info[\"cover\"] = soup.select(\"meta[property='og:image']\")[0].get(\"content\")\n    # 章节列表\n    info[\"chapterList\"] = []\n    parseChapterList(book_url, soup, info[\"chapterList\"])\n\n    return info\n\n\ndef parseChapterList(book_url, soup, chapterList):\n    dt = 0\n    for el in soup.select(\"#lbks dl\")[0].children:\n        if el.name == \"dt\":\n            dt = dt + 1\n\n        elif el.name == \"dd\":\n            if dt < 2:\n                continue\n            chapterList.append({\n                \"title\": el.select(\"a\")[0].text,\n                \"url\": urljoin(book_url, el.select(\"a\")[0].get(\"href\"))\n            })\n\n    if soup.select(\".right a\")[0].has_attr(\"href\"):\n        next_url = urljoin(book_url, soup.select(\".right a\")[0].get(\"href\"))\n        response = requests.get(next_url)\n        response.encoding = \"gbk\"\n        soup = BeautifulSoup(response.text, 'html.parser')\n        parseChapterList(book_url, soup, chapterList)\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"gbk\"\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    content = soup.select(\"#zjny\")[0].prettify()\n    return content\n",
            "version": 4,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "shengxuxiaoshuowang",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # POST请求的URL\n    url = 'http://www.shengxuxu.net/search.html?searchtype=novelname&searchkey='\n    # POST请求的数据\n    data = {'searchkey': query.encode('utf-8'), \"searchtype\": 'novelname'}\n    # 发送get请求\n    response = requests.get(url, params=data)\n    response.encoding = 'utf-8'\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for bookEl in soup.select(\".librarylist > li\"):\n        books.append({\n            \"bookTitle\": bookEl.select(\".novelname\")[0].text,\n            \"bookUrl\": urljoin(url, bookEl.select(\".novelname\")[0].get(\"href\")),\n            \"bookAuthor\": bookEl.select(\".info span\")[1].text.replace(\"作者：\",\"\"),\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"utf-8\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup.select(\"meta[property='og:novel:book_name']\")[0].get(\"content\")\n    # 作者\n    info[\"author\"] = soup.select(\"meta[property='og:novel:author']\")[0].get(\"content\")\n    # 简介\n    info[\"intro\"] = soup.select(\"meta[property='og:description']\")[0].get(\"content\")\n    # 封面\n    info[\"cover\"] = soup.select(\"meta[property='og:image']\")[0].get(\"content\")\n    # 章节列表\n    info[\"chapterList\"] = []\n    # document.querySelectorAll(\".dirlist\")[1].querySelectorAll(\"a\")[1664]\n    for el in soup.select(\".dirlist\")[1].select(\"a\"):\n        info[\"chapterList\"].append({\n            \"title\": el.text,\n            \"url\": urljoin(book_url, el.get(\"href\"))\n        })\n\n    return info\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    content = soup.select(\"#chaptercontent\")[0].prettify()\n    return content\n",
            "version": 3,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "天天看小说",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\n\n\n# {\n#   \"bookSourceComment\": \"由 @NPCDW 分享（#85\",\n#   \"bookSourceGroup\": \"\",\n#   \"bookSourceName\": \"天天看小说\",\n#   \"bookSourceType\": 0,\n#   \"bookSourceUrl\": \"https://cn.ttkan.co\",\n#   \"bookUrlPattern\": \"\",\n#   \"customOrder\": 23,\n#   \"enabled\": true,\n#   \"enabledCookieJar\": false,\n#   \"enabledExplore\": false,\n#   \"exploreUrl\": \"\",\n#   \"header\": \"\",\n#   \"lastUpdateTime\": 1687361913056,\n#   \"loginUi\": \"\",\n#   \"loginUrl\": \"\",\n#   \"respondTime\": 21167,\n#   \"ruleBookInfo\": {\n#     \"author\": \"//meta[@name='og:novel:author']/@content\",\n#     \"coverUrl\": \"//meta[@name='og:image']/@content\",\n#     \"downloadUrls\": \"\",\n#     \"intro\": \"//meta[@name='og:description']/@content\",\n#     \"kind\": \"//meta[@name='og:novel:category']/@content&&//meta[@name='og:novel:status']/@content\",\n#     \"lastChapter\": \"//meta[@name='og:novel:latest_chapter_name']/@content\",\n#     \"name\": \"//meta[@name='og:novel:book_name']/@content\",\n#     \"tocUrl\": \"\"\n#   },\n#   \"ruleContent\": {\n#     \"content\": \"class.content@tag.p@text\",\n#     \"nextContentUrl\": \"\",\n#     \"replaceRegex\": \"\"\n#   },\n#   \"ruleExplore\": {},\n#   \"ruleReview\": {},\n#   \"ruleSearch\": {\n#     \"author\": \"tag.li.1@text\",\n#     \"bookList\": \"class.novel_cell\",\n#     \"bookUrl\": \"tag.a.0@href\",\n#     \"coverUrl\": \"tag.amp-img.0@src\",\n#     \"intro\": \"tag.li.2@text\",\n#     \"kind\": \"\",\n#     \"lastChapter\": \"\",\n#     \"name\": \"tag.h3.0@text\"\n#   },\n#   \"ruleToc\": {\n#     \"chapterList\": \"class.full_chapters@children[0]@tag.a\",\n#     \"chapterName\": \"text\",\n#     \"chapterUrl\": \"href\",\n#     \"preUpdateJs\": \"\",\n#     \"updateTime\": \"\"\n#   },\n#   \"searchUrl\": \"/novel/search?q={{key}}\",\n#   \"weight\": 0\n# }\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # 请求的URL\n    url = 'https://cn.ttkan.co/novel/search'\n    # 请求的数据\n    data = {'q': query.encode('utf-8')}\n    # 发送get请求\n    response = requests.get(url, params=data)\n    response.encoding = 'utf-8'\n    log(response.text)\n    #   \"ruleSearch\": {\n    #     \"author\": \"tag.li.1@text\",\n    #     \"bookList\": \"class.novel_cell\",\n    #     \"bookUrl\": \"tag.a.0@href\",\n    #     \"coverUrl\": \"tag.amp-img.0@src\",\n    #     \"intro\": \"tag.li.2@text\",\n    #     \"kind\": \"\",\n    #     \"lastChapter\": \"\",\n    #     \"name\": \"tag.h3.0@text\"\n    #   },\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for bookEl in soup.select(\".novel_cell\"):\n        books.append({\n            \"bookTitle\": bookEl.select(\"h3\")[0].text,\n            \"bookUrl\": urljoin(url, bookEl.select(\"a\")[0].get(\"href\")),\n            \"bookAuthor\": bookEl.select(\"li\")[1].text.replace(\"作者：\", \"\"),\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"utf-8\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    #   \"ruleBookInfo\": {\n    #     \"author\": \"//meta[@name='og:novel:author']/@content\",\n    #     \"coverUrl\": \"//meta[@name='og:image']/@content\",\n    #     \"downloadUrls\": \"\",\n    #     \"intro\": \"//meta[@name='og:description']/@content\",\n    #     \"kind\": \"//meta[@name='og:novel:category']/@content&&//meta[@name='og:novel:status']/@content\",\n    #     \"lastChapter\": \"//meta[@name='og:novel:latest_chapter_name']/@content\",\n    #     \"name\": \"//meta[@name='og:novel:book_name']/@content\",\n    #     \"tocUrl\": \"\"\n    #   }\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup.select(\"meta[name='og:novel:book_name']\")[0].get(\"content\")\n    # 作者\n    info[\"author\"] = soup.select(\"meta[name='og:novel:author']\")[0].get(\"content\")\n    # 简介\n    info[\"intro\"] = soup.select(\"meta[name='og:description']\")[0].get(\"content\")\n    # 封面\n    info[\"cover\"] = soup.select(\"meta[name='og:image']\")[0].get(\"content\")\n    # 章节列表\n    info[\"chapterList\"] = []\n    #   \"ruleToc\": {\n    #     \"chapterList\": \"class.full_chapters@children[0]@tag.a\",\n    #     \"chapterName\": \"text\",\n    #     \"chapterUrl\": \"href\",\n    #     \"preUpdateJs\": \"\",\n    #     \"updateTime\": \"\"\n    #   }\n    for el in soup.select(\".full_chapters\")[0].findChildren(\"div\")[0].findChildren(\"a\"):\n        info[\"chapterList\"].append({\n            \"title\": el.text,\n            \"url\": urljoin(book_url, el.get(\"href\"))\n        })\n\n    return info\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    #   \"ruleContent\": {\n    #     \"content\": \"class.content@tag.p@text\",\n    #     \"nextContentUrl\": \"\",\n    #     \"replaceRegex\": \"\"\n    #   },\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    txt = \"\"\n    for p in soup.select(\".content p\"):\n        txt = txt + \"<br>\\n\" + p.prettify()\n    return txt\n",
            "version": 3,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "博仕书屋",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # POST请求的URL\n    url = 'https://m.boshishuwu.com/s.php'\n    # POST请求的数据\n    data = {'keyword': query.encode('utf-8'), \"t\": 1}\n    # 发送POST请求\n    response = requests.post(url, data=data)\n    response.encoding = 'utf-8'\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for c_row in soup.select(\".hot_sale\"):\n        books.append({\n            \"bookTitle\": c_row.select(\".title\")[0].text,\n            \"bookUrl\": urljoin(url, c_row.select(\"a\")[0].get(\"href\").replace(\"://m.\", \"://www.\")),\n            \"bookAuthor\": c_row.select(\".author\")[0].text.split(\" | \")[1].replace(\"作者：\", \"\"),\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"gbk\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup.select(\"#info h1\")[0].text\n    # 作者 作    者：黄金国巫妖\n    info[\"author\"] = soup.select(\"#info p\")[0].text.split(\"：\")[1]\n    # 简介\n    info[\"intro\"] = soup.select(\"#intro\")[0].prettify()\n    # 封面\n    # info[\"cover\"] = soup.select(\"#fmimg img\")[0].attrs[\"src\"]\n    # 章节列表\n    info[\"chapterList\"] = []\n    parseChapterList(book_url, soup, info[\"chapterList\"])\n\n    return info\n\n\ndef parseChapterList(book_url, soup, chapterList):\n    # 递归加载章节列表\n    dt = 0\n    for el in soup.select(\"#list dl\")[0].children:\n        if el.name == \"dt\":\n            dt = dt + 1\n            continue\n        if dt < 3:\n            continue\n        if el.name == \"dd\":\n            chapterList.append({\n                \"title\": el.select(\"a\")[0].text,\n                \"url\": urljoin(book_url, el.select(\"a\")[0].get(\"href\"))\n            })\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"gbk\"\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    content = soup.select(\"#content\")[0].prettify()\n    content = content.replace(\"最近转码严重，让我们更有动力，更新更快，麻烦你动动小手退出阅读模式。谢谢\", \"\")\n    return content\n",
            "version": 2,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "wenquge",
            "js": "import json\n\nimport requests\n\nfrom log import log\n\n\"\"\"\n{\n  \"bookSourceComment\": \"\",\n  \"bookSourceGroup\": \"API\",\n  \"bookSourceName\": \"文趣阁\",\n  \"bookSourceType\": 0,\n  \"bookSourceUrl\": \"http://m.nshkedu.com/\",\n  \"bookUrlPattern\": \"\",\n  \"customOrder\": 8,\n  \"enabled\": true,\n  \"enabledCookieJar\": false,\n  \"enabledExplore\": false,\n  \"exploreUrl\": \"\",\n  \"header\": \"{\\\"Version-Code\\\":\\\"10000\\\",\\\"Channel\\\":\\\"mz\\\",\\\"appid\\\":\\\"wengqugexs\\\",\\\"Version-Name\\\":\\\"1.0.0\\\"}\",\n  \"lastUpdateTime\": 1685098328694,\n  \"loginUrl\": \"\",\n  \"respondTime\": 181938,\n  \"ruleBookInfo\": {\n    \"author\": \"author_name\",\n    \"coverUrl\": \"book_cover\",\n    \"init\": \"<js>\\nvar javaImport = new JavaImporter();\\njavaImport.importPackage(\\n    Packages.java.lang,\\n    Packages.javax.crypto.spec,\\n    Packages.javax.crypto,\\n    Packages.android.util\\n);\\n\\nwith(javaImport){\\n    function decrypt(str){\\n        var key=SecretKeySpec(String(\\\"ZKYm5vSUhvcG9IbXNZTG1pb2\\\").getBytes(),\\\"DESede\\\");\\n        var iv=IvParameterSpec(String(\\\"01234567\\\").getBytes());\\n        var bytes=Base64.decode(String(str).getBytes(),2);\\n        var chipher=Cipher.getInstance(\\\"DESede/CBC/PKCS5Padding\\\");\\n        chipher.init(2,key,iv);\\n        return String(chipher.doFinal(bytes));\\n    }\\n}\\ndecrypt(JSON.parse(result).data.replace(/(\\\\r\\\\n)|(\\\\n)|(\\\\r)/g,''))\\n</js>result\",\n    \"intro\": \"book_brief\",\n    \"kind\": \"{{String(java.timeFormat(java.getString('$.update_time')*1000))}},{{$.category_name}},{{$.book_tags}}\",\n    \"lastChapter\": \"$.chapter_new_name\",\n    \"name\": \"book_name\",\n    \"tocUrl\": \"@js:\\nlet bid=parseInt(java.getString('$.book_id'))\\nlet subPath=parseInt(bid/1000)\\n\\\"http://s.nshkedu.com/api/book/chapter/\\\"+subPath+\\\"/\\\"+bid+\\\"/list.json\\\"\",\n    \"wordCount\": \"book_word_num\"\n  },\n  \"ruleContent\": {\n    \"content\": \"<js>\\nvar javaImport = new JavaImporter();\\njavaImport.importPackage(\\n    Packages.java.lang,\\n    Packages.javax.crypto.spec,\\n    Packages.javax.crypto,\\n    Packages.android.util\\n);\\n\\nwith(javaImport){\\n    function decrypt(str){\\n        var key=SecretKeySpec(String(\\\"ZKYm5vSUhvcG9IbXNZTG1pb2\\\").getBytes(),\\\"DESede\\\");\\n        var iv=IvParameterSpec(String(\\\"01234567\\\").getBytes());\\n        var bytes=Base64.decode(String(str).getBytes(),2);\\n        var chipher=Cipher.getInstance(\\\"DESede/CBC/PKCS5Padding\\\");\\n        chipher.init(2,key,iv);\\n        return String(chipher.doFinal(bytes));\\n    }\\n}\\ndecrypt(JSON.parse(result).data.replace(/(\\\\r\\\\n)|(\\\\n)|(\\\\r)/g,''))\\n</js>content##【.*咪咪阅读.*】\"\n  },\n  \"ruleExplore\": {\n    \"author\": \"\",\n    \"bookList\": \"\",\n    \"bookUrl\": \"\",\n    \"coverUrl\": \"\",\n    \"intro\": \"\",\n    \"kind\": \"\",\n    \"lastChapter\": \"\",\n    \"name\": \"\",\n    \"wordCount\": \"\"\n  },\n  \"ruleReview\": {},\n  \"ruleSearch\": {\n    \"author\": \"author_name\",\n    \"bookList\": \"<js>\\nvar javaImport = new JavaImporter();\\njavaImport.importPackage(\\n    Packages.java.lang,\\n    Packages.javax.crypto,\\n    Packages.javax.crypto.spec,\\n    Packages.android.util\\n);\\n\\nwith(javaImport){\\n    function decrypt(str){\\n        var key=SecretKeySpec(String(\\\"ZKYm5vSUhvcG9IbXNZTG1pb2\\\").getBytes(),\\\"DESede\\\");\\n        var iv=IvParameterSpec(String(\\\"01234567\\\").getBytes());\\n        var bytes=Base64.decode(String(str).getBytes(),2);\\n        var chipher=Cipher.getInstance(\\\"DESede/CBC/PKCS5Padding\\\");\\n        chipher.init(2,key,iv);\\n        return String(chipher.doFinal(bytes));\\n    }\\n}\\ndecrypt(JSON.parse(result).data.replace(/(\\\\r\\\\n)|(\\\\n)|(\\\\r)/g,''))\\n</js>result\",\n    \"bookUrl\": \"@js:\\nlet bid=parseInt(java.getString('$.book_id'))\\nlet subPath=parseInt(bid/1000)\\n\\\"http://s.nshkedu.com/api/book/detail/\\\"+subPath+\\\"/\\\"+bid+\\\".json\\\"\",\n    \"coverUrl\": \"book_cover\",\n    \"intro\": \"book_brief\",\n    \"kind\": \"{{String(java.timeFormat(java.getString('$.chapter_time')*1000))}},{{$.category_name}},{{$.book_tags}},{{$.book_level}}分\",\n    \"lastChapter\": \"$.chapter_new_name\",\n    \"name\": \"book_name@put:{bid:$.book_id}\",\n    \"wordCount\": \"book_word_num\"\n  },\n  \"ruleToc\": {\n    \"chapterList\": \"<js>\\nvar javaImport = new JavaImporter();\\njavaImport.importPackage(\\n    Packages.java.lang,\\n    Packages.javax.crypto.spec,\\n    Packages.javax.crypto,\\n    Packages.android.util\\n);\\n\\nwith(javaImport){\\n    function decrypt(str){\\n        var key=SecretKeySpec(String(\\\"ZKYm5vSUhvcG9IbXNZTG1pb2\\\").getBytes(),\\\"DESede\\\");\\n        var iv=IvParameterSpec(String(\\\"01234567\\\").getBytes());\\n        var bytes=Base64.decode(String(str).getBytes(),2);\\n        var chipher=Cipher.getInstance(\\\"DESede/CBC/PKCS5Padding\\\");\\n        chipher.init(2,key,iv);\\n        return String(chipher.doFinal(bytes));\\n    }\\n}\\ndecrypt(JSON.parse(result).data.replace(/(\\\\r\\\\n)|(\\\\n)|(\\\\r)/g,''))\\n</js>result\",\n    \"chapterName\": \"chapter_name\",\n    \"chapterUrl\": \"@js:baseUrl.replace('/list','/{{$._id}}')\",\n    \"isVip\": \"\",\n    \"updateTime\": \"{{$.words_count}} 字\"\n  },\n  \"searchUrl\": \"http://m.nshkedu.com/search/book/result,{\\\"method\\\":\\\"POST\\\",\\\"body\\\":\\\"kw={{key}}&pn={{page}}&is_author=0\\\"}\",\n  \"weight\": 50\n}\n\"\"\"\n\nfrom Crypto.Cipher import DES3\nfrom Crypto.Util.Padding import unpad\nimport base64\nimport re\n\n\ndef decrypt(ciphertext):\n    # 3DES密钥和初始化向量\n    key = b\"ZKYm5vSUhvcG9IbXNZTG1pb2\"\n    iv = b\"01234567\"\n\n    # 使用base64解码密文\n    ciphertext = base64.b64decode(re.sub(r'(\\r\\n)|(\\n)|(\\r)', '', ciphertext))\n\n    # 创建cipher对象\n    cipher = DES3.new(key, DES3.MODE_CBC, iv=iv)\n\n    # 解密\n    plaintext = unpad(cipher.decrypt(ciphertext), DES3.block_size)\n\n    return plaintext.decode('utf-8')\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # POST请求的URL\n    url = 'http://m.nshkedu.com/search/book/result'\n    # POST请求的数据\n    data = {'kw': query.encode('utf-8'), \"is_author\": 0, \"pn\": 1}\n    headers = {\"Version-Code\": \"10000\", \"Channel\": \"mz\", \"appid\": \"wengqugexs\", \"Version-Name\": \"1.0.0\"}\n    # 发送POST请求\n    response = requests.post(url, data=data, headers=headers)\n    response.encoding = 'utf-8'\n    log(response.text)\n    data = decrypt(json.loads(response.text)[\"data\"])\n    log(data)\n    # 创建BeautifulSoup对象\n    # \"bookUrl\": \"@js:\\nlet bid=parseInt(java.getString('$.book_id'))\\nlet subPath=parseInt(bid/1000)\\n\\\"http://s.nshkedu.com/api/book/detail/\\\"+subPath+\\\"/\\\"+bid+\\\".json\\\"\",\n    data = json.loads(data)[\"result\"]\n    books = []\n    for bookInfo in data:\n        bid = int(bookInfo[\"book_id\"])\n        books.append({\n            \"bookTitle\": bookInfo[\"book_name\"],\n            \"bookUrl\": f\"http://s.nshkedu.com/api/book/detail/\" + str(int(bid / 1000)) + \"/\" + str(bid) + \".json\",\n            \"bookAuthor\": bookInfo[\"author_name\"],\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"utf-8\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = json.loads(decrypt(json.loads(response.text)[\"data\"]))[\"result\"]\n    log(soup)\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup[\"book_name\"]\n    # 作者 作    者：黄金国巫妖\n    info[\"author\"] = soup[\"author_name\"]\n    # 简介\n    info[\"intro\"] = soup[\"book_brief\"]\n    # 封面\n    info[\"cover\"] = soup[\"book_cover\"]\n    # 章节列表\n    info[\"chapterList\"] = []\n    chapter_url = f\"http://s.nshkedu.com/api/book/chapter/\" + str(int(soup[\"book_id\"] / 1000)) + \"/\" + str(\n        soup[\"book_id\"]) + \"/list.json\"\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    data = json.loads(decrypt(json.loads(response.text)[\"data\"]))[\"result\"]\n    log(data)\n    for chapter in data:\n        info[\"chapterList\"].append({\n            \"title\": chapter[\"chapter_name\"],\n            \"url\": f\"http://s.nshkedu.com/api/book/chapter/\" + str(int(soup[\"book_id\"] / 1000)) + \"/\" + str(\n                soup[\"book_id\"]) + \"/\" + str(chapter[\"_id\"]) + \".json\"\n        })\n\n    return info\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    # 创建BeautifulSoup对象\n    soup = json.loads(decrypt(json.loads(response.text)[\"data\"]))\n    log(soup)\n    # 章节内容 html\n    content = soup[\"content\"]\n    return content.replace(\"\\n\", \"<br>\")\n",
            "version": 2,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "dingdian",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # POST请求的URL\n    query = query.encode('utf-8')\n    url = 'http://www.idingdian.com/search/'\n    # 发送get请求\n    data = {'searchkey': query}\n    response = requests.get(url, params=data)\n    response.encoding = 'utf-8'\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for bookEl in soup.select(\".item\"):\n        books.append({\n            \"bookTitle\": bookEl.select(\"a\")[0].attrs[\"title\"],\n            \"bookUrl\": urljoin(url, bookEl.select(\"a\")[0].get(\"href\")),\n            \"bookAuthor\": bookEl.select(\"a\")[2].attrs[\"title\"],\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"utf-8\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup.select(\"meta[property='og:novel:book_name']\")[0].get(\"content\")\n    # 作者\n    info[\"author\"] = soup.select(\"meta[property='og:novel:author']\")[0].get(\"content\")\n    # 简介\n    info[\"intro\"] = soup.select(\"meta[property='og:description']\")[0].get(\"content\")\n    # 封面\n    info[\"cover\"] = soup.select(\"meta[property='og:image']\")[0].get(\"content\")\n    # 章节列表\n    info[\"chapterList\"] = []\n    # document.querySelectorAll(\".dirlist\")[1].querySelectorAll(\"a\")[1664]\n    start = 0\n    for el in soup.select(\"#list dl\")[0].children:\n        if el.name == \"dt\":\n            start += 1\n            continue\n        if start == 2 and el.name == \"a\":\n            info[\"chapterList\"].append({\n                \"title\": el.text,\n                \"url\": urljoin(book_url, el.get(\"href\"))\n            })\n\n    return info\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    content = soup.select(\"#booktxt\")[0].prettify()\n\n    if soup.select(\"#next_url\")[0].text == \"下一页\":\n        content += getChapterContent(urljoin(chapter_url, soup.select(\"#next_url\")[0].get(\"href\")))\n\n    return content\n",
            "version": 2,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        },
        {
            "source": "明智屋",
            "js": "from urllib.parse import urljoin\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom log import log\nfrom urllib.parse import quote\n\n\ndef search(query):\n    \"\"\"\n    书源搜索函数\n    :param query: 搜索关键词\n    :return [{\"bookTitle\":\"书名\", \"bookUrl\": \"书籍链接\", \"bookAuthor\": \"作者\"}, ...] 搜索结果列表\n    \"\"\"\n    # utf8编码\n    query = query.encode('utf-8')\n    # url encode\n    query = quote(query)\n    url = f'https://www.mingzw.net/mzwlist/{query}.html'\n    # 发送get请求\n    response = requests.get(url)\n    response.encoding = 'utf-8'\n    log(response.request.url)\n    log(response.text)\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    books = []\n    for bookEl in soup.select(\".figure-horizontal\"):\n        books.append({\n            \"bookTitle\": bookEl.select(\"a\")[0].attrs[\"title\"],\n            \"bookUrl\": urljoin(url, bookEl.select(\"a\")[0].get(\"href\")),\n            \"bookAuthor\": bookEl.select(\"dd\")[0].text,\n        })\n\n    return books\n\n\ndef getDetails(book_url):\n    \"\"\"\n    获取章节列表\n    :param book_url: 书籍链接\n    :return\n    {\"url\": \"书籍链接\", \"title\": \"书名\", \"author\": \"作者\", \"intro\": \"简介\", \"cover\": \"封面链接\",\n     \"chapterList\": [{\"title\": \"章节名\", \"URL\": \"章节链接\"}, ...]\n     }\n    \"\"\"\n\n    # url book_url\n    # 发送get请求\n    response = requests.get(book_url)\n    response.encoding = \"utf-8\"\n    info = {}\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    info[\"url\"] = book_url\n    # 书名\n    info[\"title\"] = soup.select(\".novel-name\")[0].text.replace(\"《\", \"\").replace(\"》\", \"\")\n    # 作者\n    info[\"author\"] = soup.select(\".picinfo a\")[0].text\n    # 简介\n    info[\"intro\"] = soup.select(\".content\")[0].text\n    # 封面\n    info[\"cover\"] = urljoin(book_url, soup.select(\".pic img\")[0].get(\"src\"))\n    # 章节列表\n    info[\"chapterList\"] = []\n    chapterUrl = soup.select(\".view-all-btn\")[0].get(\"href\")\n    parseChapterList(book_url, urljoin(book_url, chapterUrl), info[\"chapterList\"])\n\n    return info\n\n\ndef parseChapterList(book_url, chapterUrl, chapterList):\n    response = requests.get(chapterUrl)\n    response.encoding = \"utf-8\"\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 递归加载章节列表\n    dt = 0\n    for el in soup.select(\".gclearfix a\"):\n        chapterList.append({\n            \"title\": el.text,\n            \"url\": urljoin(chapterUrl, el.get(\"href\"))\n        })\n\n    chapterList.pop(-1)\n    chapterList.pop(-1)\n    chapterList.pop(-1)\n\n\ndef getChapterContent(chapter_url):\n    \"\"\"\n    获取章节内容\n    :param chapter_url: 章节链接\n    :return: 章节内容 html格式\n    \"\"\"\n    # 发送get请求\n    response = requests.get(chapter_url)\n    response.encoding = \"utf-8\"\n    # 创建BeautifulSoup对象\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # 章节内容 html\n    content = soup.select(\".contents\")[0].prettify()\n    content = content[:content.rindex(\"推荐小说:\")]\n    return content\n",
            "version": 1,
            "original": false,
            "enable": true,
            "requestDelay": -1,
            "website": ""
        }
    ]
}